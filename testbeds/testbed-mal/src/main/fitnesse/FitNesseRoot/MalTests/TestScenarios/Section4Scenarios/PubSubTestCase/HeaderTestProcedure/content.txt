#
# Copyright or Â© or Copr. CNES
#
# This software is a computer program whose purpose is to provide a 
# framework for the CCSDS Mission Operations services.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-C license and that you accept its terms.
#

!*< Hidden
!define TEST_SYSTEM {slim}

|Import|
|org.ccsds.moims.mo.mal.test.patterns.pubsub|

*******!
!4 Test procedure: header
This test procedure checks the MAL message header in every stage of the Pub/Sub interaction.
It is executed once for each !-QoS-! level, session. 
The session name depends on the session type. If the session type is Live, the name is 'LIVE'. If the session type is Replay, the name is 'R1'. If the session type is Simulation, the name is 'S1'.

The consumer creates subscriptions from the following parameters:
 * subscription identifier: 'sub1'
 * authentication identifier: '0x00,0x01'
 * priority: 1
 * domain: 'Test,Domain'
 * networkZone: '!-NetworkZone-!'
 * entity expression: 'A,null,null,null'
 * only on change: false
 
All the tests are executed once with a private broker and a second time with a shared one.
The shared broker is created one the consumer side because. In this way, it enables the test to intercept the messages going out of the provider's publisher.

Some headers are only checked with a shared broker:
 * Publish
 * Publish Register
 * Publish Register ack
 * Publish Register Error
 * Publish Deregister
 * Publish Deregister ack
 
 The Publish Error is triggered by publishing an entity that has not been registered: 'B,null,null,null'.
 The Publish Register Error is triggered by registering an entity which key is recognized by the test transport.
 The Notify Error is injected through the test transport module.
 
 The provider assertions are described in the IPTest service specification (section 5.1).
 The consumer assertions are described in annex B.

!*> Sub scenario definitions
|scenario| test publish register with shared broker | shared |
|ensure |initiate publish register with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |Call the operation getResult|
|ensure |the provider assertions|


|scenario| test register with domain | domain | and shared broker | shared |
|ensure |initiate register with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the consumer assertions|

|scenario| test register with shared broker | shared |
|test register with domain | 1 | and shared broker | @shared |
|test register with domain | 2 | and shared broker | @shared |
|test register with domain | 3 | and shared broker | @shared |
|test register with domain | 4 | and shared broker | @shared |


|scenario| test publish with domain | domain | and shared broker | shared |
|ensure |initiate publish with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the provider assertions|

|scenario| test publish with shared broker | shared |
|test publish with domain | 1 | and shared broker | @shared |
|test publish with domain | 2 | and shared broker | @shared |
|test publish with domain | 3 | and shared broker | @shared |
|test publish with domain | 4 | and shared broker | @shared |


|scenario| test notify with domain | domain | and shared broker | shared |
|ensure |get notify with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the provider assertions|
|ensure |the consumer assertions|

|scenario| test notify with shared broker | shared |
|test notify with domain | 1 | and shared broker | @shared |
|test notify with domain | 2 | and shared broker | @shared |
|test notify with domain | 3 | and shared broker | @shared |
|test notify with domain | 4 | and shared broker | @shared |


|scenario| test notify error with domain | domain | and shared broker | shared |
|ensure |initiate notify error with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the consumer assertions|

|scenario| test notify error with shared broker | shared |
|test notify error with domain | 1 | and shared broker | @shared |
|test notify error with domain | 3 | and shared broker | @shared |


|scenario| test publishError with domain | domain | and shared broker | shared |
|ensure |initiate publish error with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the provider assertions|

|scenario| test publishError with shared broker | shared |
|test publishError with domain | 1 | and shared broker | @shared |
|test publishError with domain | 2 | and shared broker | @shared |
|test publishError with domain | 3 | and shared broker | @shared |
|test publishError with domain | 4 | and shared broker | @shared |


|scenario| test deregister with domain | domain | and shared broker | shared |
|ensure |initiate deregister with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the consumer assertions|

|scenario| test deregister with shared broker | shared |
|test deregister with domain | 1 | and shared broker | @shared |
|test deregister with domain | 2 | and shared broker | @shared |
|test deregister with domain | 3 | and shared broker | @shared |
|test deregister with domain | 4 | and shared broker | @shared |


|scenario| test publishDeregister with shared broker | shared |
|ensure |initiate publishDeregister with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |Call the operation getResult|
|ensure |the provider assertions|


|scenario| test publish register error with shared broker | shared |
|ensure |initiate publish register error with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |Call the operation getResult|
|ensure |the provider assertions|


|scenario| test register error with domain | domain | and shared broker | shared |
|ensure |initiate register error with qos | Assured | and session | Live | and shared broker | @shared | and domain | @domain |
|ensure |Call the operation getResult|
|ensure |the consumer assertions|

|scenario| test register error with shared broker | shared |
|test register error with domain | 1 | and shared broker | @shared |
|test register error with domain | 2 | and shared broker | @shared |
|test register error with domain | 3 | and shared broker | @shared |
|test register error with domain | 4 | and shared broker | @shared |


|scenario| test first publish register with shared broker | shared |
|ensure |initiate publish register with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |initiate register with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |initiate publish with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |initiate publish error with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |initiate deregister with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |initiate publish deregister with qos | Assured | and session | Live | and shared broker | @shared | and domain | 1 |
|ensure |Call the operation getResult|
|ensure |the provider assertions|

|scenario| test detailed Pub Sub IP with shared broker | shared |
|test publish register with shared broker | @shared |
|test register with shared broker | @shared |
|test publish with shared broker | @shared |
|test notify with shared broker | @shared |
|test publishError with shared broker | @shared |
|test notify error with shared broker | @shared |
|test deregister with shared broker | @shared |
|test publishDeregister with shared broker | @shared |
|test publish register error with shared broker | @shared |
|test register error with shared broker | @shared |

# Note that the scenario includes a notify error line followed by a deregister lined |
# This is illegal because a NOTIFY_ERROR leads to a final state
# and the DEREGISTER should not be received
# However both implementations pass this test !

***********!

|script| header test procedure |
|note| set up the test instance |
|create fixture single instance|

|script| header test procedure |
|note| first publish register |
|test first publish register with shared broker | false |
|test first publish register with shared broker | true |

|script| header test procedure |
|note| detailed Pub Sub IP |
|test detailed Pub Sub IP with shared broker | false |
|test detailed Pub Sub IP with shared broker | true |

|script| header test procedure |
|note| clean up the test instance |
|delete fixture single instance|
