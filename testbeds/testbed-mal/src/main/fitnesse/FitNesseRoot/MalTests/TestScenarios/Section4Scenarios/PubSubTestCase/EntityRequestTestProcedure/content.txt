#
# Copyright or Â© or Copr. CNES
#
# This software is a computer program whose purpose is to provide a 
# framework for the CCSDS Mission Operations services.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-C license and that you accept its terms.
#

!*< Hidden
!define TEST_SYSTEM {slim}

|Import|
|org.ccsds.moims.mo.mal.test.patterns.pubsub|

*******!
!4 Test procedure: entity request

At first, publishRegister() is called to instantiate the broker with four subscription key names: K1, K2, K3 and K4.

This test checks that the subscription requests are correctly interpreted by the broker, in particular the expression used to define the expected entities.
A list of subscription key values is defined:
 * A.[null].[null].[null]
 * A.2.[null].[null]
 * A.2.3.[null]
 * A.2.3.4
 * B.[null].[null].[null]
 * Q.2.3.[null]

A list of subscription request expressions is defined:
 * A.[null].[null].[null]
 * A.*.[null].[null]
 * A.*.*.*
 * A.2.[null].[null]
 * A.2.*.[null]
 * *.2.*.[null]
 * B.*.*.*

The consumer does the following actions:
 * Creation of one subscription for each expression and registration.
 * Trigger the publication of one !-TestUpdate-! for each subscription key values.
 
The consumer checks that the expected keys are received and only them (see table below).

!*> Sub scenario definitions
|scenario| entity request | with shared broker |
|ensure |prepare test to use the following subscription key values | A.[null].[null].[null],A.2.[null].[null],A.2.3.[null],A.2.3.4,B.[null].[null].[null],Q.2.3.[null] | and shared broker | @shared |
|ensure |subscribe with key names | A.[null].[null].[null] | and select keys | [null] | and expected key values | A.[null].[null].[null] |
|ensure |subscribe with key names | A.*.[null].[null] | and select keys | [null] | and expected key values | A.[null].[null].[null],A.2.[null].[null] |
|ensure |subscribe with key names | A.*.*.*| and select keys | [null] | and expected key values | A.[null].[null].[null],A.2.[null].[null],A.2.3.[null],A.2.3.4 |
|ensure |subscribe with key names | A.2.[null].[null] | and select keys | [null] | and expected key values | A.2.[null].[null] |
|ensure |subscribe with key names | A.2.*.[null] | and select keys | [null] | and expected key values | A.2.[null].[null],A.2.3.[null] |
|ensure |subscribe with key names | *.2.*.[null] | and select keys | [null] | and expected key values | A.2.[null].[null],A.2.3.[null],Q.2.3.[null] |
|ensure |subscribe with key names | B.*.*.* | and select keys | [null] | and expected key values | B.[null].[null].[null] |
|ensure |publish deregister |
***********!

|script| entity request test procedure |
|entity request | false |
|entity request | true |
